---
layout: post
title: 软件架构复习笔记(2)
category: blog
published: false 
meta:
  location: NJU 
tags: [architecture, review，note]
---

h2. 2. 软件设计的审美标准

h3. 审美标准是什么

* 简洁性：模块化
* 一致性（概念完整性）：体系结构的风格，模块化
* 坚固性（高质量）：最重要的是体现在体系结构上，设计模式所要解决的问题，模块化
  ** 易复用
  ** 易修改
  ** 易读
  ** 易理解
  ** 易维护
  ** 可靠性 (availability 可以正常工作, reliability 故障和故障修复)
  ** 性能，质量相关

h3. 列举已知的设计方法与技术（至少5中），他们促进了那些审美标准的达成

模块化：促进了结构一致性，坚固性（易维护，易复用等），促进了简洁性
信息隐藏：促进了简洁性，坚固性（易维护，易复用），破坏了简洁性
设计模式：促进了坚固性（易复用，易维护等等），一致性？
体系结构风格：促进了一致性，坚固性
职责分配（GRASP）：促进了坚固性，一致性
协作设计：促进了坚固性，一致性？


h2. 3. 设计的层次性

h3. 高层设计、中层设计和低层设计各自的出发点、主要关注因素（即那些审美要素）、主要方法与技术和最终制品


h4. 低层设计（代码设计）

出发点：
* 程序语言所提供的数据结构等东西太少了
* 为了解决类型的适配的问题
* 底层设计将基本的语言单位（类型与语句），组织起来，建立高质量的数据结构 + 算法

关注点：
* 简洁性
* 部分坚固性，包括坚固性的，易读，易维护，数据结构易用，算法可靠、易读
* 屏蔽程序中复杂数据结构与算法的实现细节

主要技术：

* Defensive Programming
* Assertive Programming (Design-by-Contract)
* Test-Driven Programming
* Error handling, exception handling
* Configuring Programming
* Table-driven Protramming
* State-mathine based Programming

前面四个是关于可靠性的，后面三个是关于数据结构带来易读性

内部结构是算法和数据类型，外在表现是抽象数据类型

h4. 中层设计（模块与类结构设计）

出发点：
* 想要使复杂的东西变简单
* 把复杂的东西分解成尽可能独立的片段

关注点：
* 简洁性（易开发，易修改，易复用）
* 可观察性（易开发，易调试，易复用）
* 一致性（一些要求，如高内聚，低耦合等）
* 坚固性（易开发，易修改，易复用等）

问题困难：程序片段不可能完全独立
方法：实现尽可能的独立（低耦合，高内聚）
主要的方法：
* 高内聚
* 低耦合
* 模块化
* 信息隐藏


h4. 高层设计

出发点：
* 主要为了解决整体功能组织的问题
* 组织的时候设计和功能
* 总体结构和质量属性

方法：
* 场景驱动
* 体系结构风格


h2. 4. 软件体系结构的风格

要求：
* 描述或比较相关的风格
* 对给定场景判断需要使用的风格

h3. 主程序/子程序风格 (Main Program/Subroutine Style)

h3. 面向对象风格 (Object-Oriented Style)

h3. 分层风格 (Layered Style)

h3. 隐式调用风格 (Implicit Invocation Style)

h3. 管道过滤器风格 (Pipe-Filter Style)

h3. 存储库风格 (Repository Style)

h3. MVC 风格

h3. 客户端/服务器风格(Client/Server Style)


h2. 5. 职责分配与设计协作

要求:
* 协作设计（控制风格）的比较和场景判定
* 对给定场景和要求的控制风格，根据GRASP模式判定职责的分配
* 根据分析类图和体系结构模块接口，建立基本设计类图


h2. 6. 设计模式

h3. 重点，设计模式部分所有的思考题（2题）

h3. 普通 Programming to Interface 有哪些手段？集合类型 PTI 有那些手段

h3. OCP 有那些手段（提示：不只是继承）

h3. 一个模块的信息隐藏有哪两种基本类型，各自有哪些处理手段？

两种决策类型：
* 需求：即一个模块的接口功能与模块内部程序细节的分离
  ** 给出功能接口，隐藏功能实现程序的细节
* 变化：将要发生变化的程序部分需要进行一个决策
  ** 给出需要修改部分的接口，隐藏待修改部分的实现程序细节

h3. 实现共性与可变性有哪些手段？ 对给定的场景，给出共性与可变性的设计方案，将继承和聚合搞好

h3. 在解决De-Coupling时，常常使用哪些Indirection的手段？对给定场景给出Indirection的解决方案

从常见模式来考虑

h3. MVC与分层方式的区别（要具体到实现）

h3. 对象的创建有哪些常见的解决方法（hint：这里要求常见解决方法，不是设计模式）

创建谁来创建
高内聚
低耦合
创建者（聚合，包含）
