---
layout: post
title: 人机交互复习笔记
category: note 
published: true 
home: "no"
meta:
  location: NJU 
tags: [HCI, review, note]
---


h2. 概述

h3. 什么是人机交互

bq. HCI is a discipline concerned with the design, evaluation and implementation of interactive computing systems for human

h3. HCI 的研究内容

* 使用上下文
  ** 社会组织和工作
  ** 应用领域
  ** 人机匹配和适应
* 人
  ** 人类信息处理
  ** 语言、通信和交互
  ** 人机工程学
* 计算机
  ** 输入设备
  ** 对话技术
  ** 对话类型
  ** 计算机图形
  ** 对话架构
* 开发过程
  ** 设计方法 
  ** 实现技术和工具
  ** 评估技术
  ** 示例系统和案例学习

h3. HCI VS SE

* 以用户为中心 VS 以功能为中心
* 评估方式不同
* 非形式化 VS 形式化
* 包含较多主观性和灵活性 VS 实施策略和方法学则上常有一定的倾向性

HCI 对 SE 促进，SE 方法实现交互的缺陷
* 没有提出明确地对用户界面及可用性需求进行描述的 方法
* 不能够在系统开发过程进行中对用户界面进行终端测 试
* 具有完善的系统功能
  ** 产品的可用性、有效性以及满意度并不高


h2. 交互设计基础

h3. 命令行交互

用户通过在屏幕某个位置上键 入特定命令的方式来执行任务(Character-based interface)

优点：
* 专家用户能够快速完成任务
* 较GUI节约系统资源
* 可动态配置可操作选项
* 键盘操作较鼠标操作更加精确
* 支持用户自定义命令

缺点：
* 命令语言的掌握对用户的记忆能力提出较高要求
* 基于回忆的方式(recall memory)
  ** 没有GUI基于识别的方式(recognition memory)容易使用
* 键盘操作，出错频率较高
* 要求用户记忆指令的表示方式
  ** 与可用性理论所强调的“不应要求用户了解计算机底层的实 现细节”相违背

h3. 菜单驱动界面

以一组层次化菜单的方式提供用户可用的功能选项，一个或多个选项的选择可以改变界面的状态

优点：
* 基于识别机制，对记忆的需求较低
* 具有自解释性
* 容易纠错
* 适合新手用户。若提供了较好的快捷键功能，则对于专家用户同样适用。

缺点：
* 导航方式不够灵活
* 当菜单规模较大时，导航效率不高
* 占用屏幕空间，不适合小型显示设备。
* 为节省空，通常组织为下拉菜单或弹出式菜单
* 对专家用户而言使用效率不高

h3. 基于表格的界面

显示给用户的是一个表格，里面有一些需要用户填写的空格

优点：
* 简化数据输入
* 只需识别无需学习
* 特别适合于日常文书处理等需要键入大量数据的工作

缺点：
* 占用大量屏幕空间
* 致业务流程较形式

h3. 直接操纵

* 用户通过在可视化对象上面进行某些操作来达到执行任务的目的
* 展现了真实世界的一种扩展
* 对象和操作一直可见
* 迅速且伴有直观的显示结果的增量操作
* 增量操作可以方便地逆转

直接操作的三个阶段：
* 自由阶段
* 捕获阶段
* 中止阶段

优点：
* 将任务概念可视化，用户可以非常方便地辨别他们
* 容易学习，适合新手用户
* 基于识别，对记忆的要求不高，可减少错误发生
* 支持空间线索，鼓励用户对界面进行探索
* 可实现对用户操作的快速反馈，具有较高的用户主观满意度

缺点：
* 实现起来比较困难
* 对专家用户而言效率不高
* 不适合小屏幕显示设备
* 对图形显示性能的需求较高
* 不具备自解释性，可能误导用户

h3. 问答界面：

通过询问用户一系列问题实现人与计算机的交互
* Web问卷是典型的采用问答方式进行组织的应用
* 应允许用户方便地取消其中一个界面的选项

优点：
* 对记忆的要求较低
* 每个界面具有自解释性
* 将任务流程以简单的线性表示
* 适合新手用户

缺点：
* 要求从用户端获得有效输入
* 要求用户熟悉界面控制
* 纠错过程可能比较乏味

h3. 隐喻界面

* 在用户已有知识的基础上建立一组新的知识，实现界面视觉提示和系统功能之间的知觉联系，进而帮助用户从新手用户转变为专家用户

优点：
* 主观生动
* 无需学习

局限性：
* 不具有可扩展性
* 不同用户对同一事物可能产生不同的联想
* 紧紧地将我们的理念和物理世界束缚在一起
* 寻找恰当的隐喻可能存在困难

h3. 自然语言交互

自然语言的模糊性
* The boy hit the dog with the stick.
* 她说她不知道

受限于理解技术，当前只能够使用受限的语言与计算机进行交流

？？？信息处理模型。。。

h3. 人类处理机模型

* 感知处理器
  ** 信息将被输出到声音储存和视觉储存区域
* 认知处理器
  ** 输入将被输出到工作记忆
* 动作处理器
  ** 执行动作

问题：
* 把认知过程描述为一系列处理步骤
* 仅关注单个人和单个任务的执行过程
  ** 忽视了复杂操作执行中人与人之间及任务与任务之间的互动
* 忽视了环境和其他人可能带来的影响
* 外部认知模型、分布式认知模型

h3. 格式心理学

研究人是如何感知一个良好组织的模式的，而不是将其视为一系列相互独立的部分：事物的整体区别于部分的组合

* 相近性原则：空间上比较靠近的物体容易被视为整体，设计界面时，应按照相关性对组件进行分组
* 相似性原则：人们习惯将看上去相似的物体看成一个整体，功能相近的组件应该使用相同或相近的表现形式
* 连续性原则：共线或具有相同方向的物体会被组合在一起，将组件对齐，更有助于增强用户的主观感知效果
* 完整和闭合原则：人们倾向于忽视轮廓的间隙而将其视作一个完整的整体，页面上的空白可以帮助实现分组
* 对称性原则：相互对称且能够组合为有意义单元的物体会被组合在一起，有的时候跟相近性冲突～～～
* 前景&背景：前景和背景在某些情况下可以互换，“整体区别于局部”

反例：让重点更突出

h3. 人的认知特性

* 感觉记忆 or 瞬时记忆，1s
* 短时记忆，感觉记忆编码后，30s，正在使用的，7+2
* 长时记忆，无限容量

h3. 7 + 2理论 VS 交互式系统设计

影响：各种只能有7个
事实：
* 浏览菜单和工具栏基于人的识别功能
* 人识别事物的能力要远胜于回忆事物的能力界面设计时要尽可能减小对用户的记忆需求，同时可考虑通过将信息放置于一定的上下文中，来减少信息 单元的数目

长时记忆的启发
* 注意使用线索来引导用户完成特定任务
* 在追求独特的创新设计时也应注重结合优秀的交互范型

视错觉的启示：对于物体的视觉感知与物体所处的上下文密切相关

h3. 交互设备

h4. 文本输入设备：

键盘
* 一般一次只能响应一个按键
* 新用户的击键速率大约为每秒钟1次，而熟练用户则能达到每秒15次的敲击频率
* 按键较多的硬盘可营造一种专业化的印象，新手用户望而生畏
* 小键盘特别适合移动设备应用，功能也可能因此受到限制
* QWERTY键盘

和弦键盘
* 能够同时响应多个按键，实现快速数据输入
* 学习使用时间也比较长

投影键盘
* 红外线技术跟踪手指的动作
* 可减小键盘所占的物理空间

手写输入
* 比较自然
* 输入速度慢

语音输入
* 受场景噪音影响
* 受识别效果影响，输入效率仅为键盘输入的一半

光学字符识别
* Optical character recognition，简称OCR
* 让计算机直接“阅读”
* 实现了大批量历史数据的信息化

h4. 定位设备

WIMP系统的显著功能
* 允许在屏幕上通过指点物体实现对物体的操作或是完成某项功能

鼠标:最常用的指点和定位设备
* 将鼠标拿离桌面再放到不同位置时，屏幕光标并不会发生移动
* 节省空间，但可能影响到新手用户的使用

触摸板:最广泛的膝上型电脑鼠标
* 通过电容感应来获知手指移动情况，对手指的热量并不敏感
* 手指在板上移动的距离与光标在屏幕上移动的距离之间的比率随手指移动的速度而变化
* 优点
  ** 反应灵敏、移动速度快
* 缺点
  ** 定位精度较低
  ** 手指出汗时会出现打滑，不适合在潮湿、多灰的环境

指点杆（小红帽）
* 操纵杆的变形
* 初学者较难上手
* 特点是定位准确，在火车等移动场景下也能够进行准确定位
* 可通过手指的力度控制鼠标光标移动的速度

触摸屏
* 通过手指或铁笔中断一个光线的阵列
* 较鼠标直观，定位的速度很快：适合于在屏幕上选择菜单条目
* 定位精度较差，在小范围选择比较困难
* 制造成本很高，容易污损

尖笔/光笔
* 较高的定位精度：在个人数字助理(PDA)中得到了普及
* 用户的手需要在设备间不断切换，交互效率下降
* 遮盖部分屏幕显示，设计界面，需要考虑用户手的摆放位置

h4. 图像输入设备

* 扫描仪
* 数码相机
* 传真机 

h4. 显示设备

光栅扫描阴极射线管(Cathode ray tube，简称CRT)
* 优点：
  ** 图像色彩丰富
  ** 高清晰度、低成本
  ** 丰富的几何失真调整能力
* 缺点：
  ** 辐射
  ** 高电压具有潜在的爆炸危险
  ** 占据较大空间

液晶显示器
* 优点
  ** 低辐射、低耗能
  ** 体积小质量轻
  ** 可视面积大，不存在几何和线性失真
* 缺点
  ** 价格昂贵
  ** 侧面显示会失真
  ** 响应时间慢
  ** 使用寿命有限

等离子监视器
* 优点
  ** 可视角度较液晶显示器大
  ** 更好的颜色质量和对比度
* 缺点
  ** 使用寿命也较短
  ** 易产生残留影像

发光二极管
* 优点
  ** 耗电量小
  ** 反应时间快
  ** 使用寿命长
  ** 体积小
* 缺点
  ** 价格昂贵
  ** 使用寿命与散热性能的好坏密切相关


电子墨水
* 优点
  ** 易读性好、低功耗、成本低、质量小
  ** 可以应用到纸上或布上，产生和报纸一样的显示效果
  ** 具有较好的柔性，可折叠

...

h3. 交互框架

h4. EEC

作用：
* 提供理解或定义某种事物的一种结构
* 能够帮助人们结构化设计过程
* 认识设计过程中的主要问题
* 还有助于定义问题所涉及的领域

执行/评估活动周期EEC：
* 最有影响力的框架
* 定义了活动的四个组成部分
  ** 目标(Goal) != 意图(Intention)
  ** 执行(Execution)
  ** 客观因素(World)
  ** 评估(Evaluation)

目标 VS 意图
* 单个目标可对应多个意图
  ** 举例:删除文档中的部分内容的目标 
  ** 意图1:通过编辑菜单删除
  ** 意图2:通过删除按钮删除
  ** 每个意图可包含一系列活动

EEC模型
# From the goal
# From the intention
# Specifiy the action
# Excute the acion
# Perceive the system state
# Interpret the system state

* 从用户视角探讨人机界面问题
* 共有七个阶段
  ** 1-4:执行阶段
  ** 5-7:评估阶段
* 每个循环代表一个动作

h4. 执行隔阂和评估隔阂

EEC模型可解释为什么有些界面的使用存在问题？
执行隔阂
* 用户为达目标而制定的动作与系统允许的动作之间的差别 
* “保存文件”举例
评估隔阂
* 系统状态的实际表现与用户预期之间的差别

意义
* 如何才能够使用户简单地确定哪些活动是被允许的
* 如何确定系统是否处于期望的运行状态等问题

h4. 扩展EEC

* EEC模型不能描述人与系统通过界面进行的通信
* 四个构成部分+四个步骤(翻译过程)
  ** 系统:内核语言
  ** 用户:任务语言
  ** 输入:输入语言
  ** 输出:输出语言
* 执行阶段
  ** 定义，执行，表现
  ** 设计人员应保证从输入到系统的翻译是容易的 
* 评估阶段：观察

h2. 简易的可用性工程

h3. 可用性目标

* 易学性（learnability）
  ** 指使用系统的难易，即系统应当容易学习，从而用户可以在较短时间内应用系统来完成某些任务
  ** 最基本的可用性属性
  ** 10 分钟法则
* 易记性（memorability）
  ** 用户在学会使用软件后应当容易记忆
  ** 学会某个系统后，应能够迅速回想起它的使用方法
  ** 影响因素：位置，分组，惯例，冗余
  ** 启发：良好组织，使用用户已有的经验帮助提高易记性
* 低出错率
  ** 人是会犯错误的
    *** 有些错误会被用户发现并纠正
    *** 有些错误会带来灾难性后果
  ** 措施
    *** 保证导致灾难性后果错误的发生频率降到最低
    *** 保证错误发生后迅速恢复到正常状态
* 有效率（efficiency）
  ** 用户学会使用产品之后，用户应该具有更高的生产力水平(效率)
  ** 效率指熟练用户到达学习曲线上平坦阶段时的稳定绩效水平
* 主观满意度
  ** 用户对系统的主观喜爱程度
  ** 某些情况下，系统的娱乐价值比完成任务的速度更为重要
  ** 观念的转变
    *** 传统软件质量观：侧重内部效率和可靠性，如程序代码运行时的效率以及灵活性、可维护性
    *** 人机交互软件质量观，转向用户视角

h3. 用户体验目标

问题：到底什么样的产品才是用户愿意使用和购买的？

h4. 什么是用户体验？
* 用户在与系统交互时的感觉
* 为儿童创建的网站应该要有趣并且引人入胜
* 面向年轻人的网站则应该更注重时尚感和趣味性
* 较可用性目标主观
* 可用性可能对用户体验带来阻碍

h3. 简易的可用性工程

h4. 特点
* 以提高产品的可用性为目标的先进的产品开发方法论
* 借鉴了许多不同领域的方法和技术
* 强调以人为中心来进行交互式产品的设计研发

h4. 常用方法
* 选择一些能够代表目标用户群体的测试用户
* 让这些用户使用系统执行一组预定的任务
* 比较任务的执行情况
* 针对多维属性
  ** 取每个可用性属性的平均值
  ** 查看整体分布情况

h4. 主观满意度度量例子
* 在1~5分的5分制情况下平均值至少为4
* 或至少50%的用户给系统打5分或给系统打1分的用户不超过5%

h4. 注意
* 度量一定要针对特定的用户和特定的任务进行
* 用户对不同任务的可用性结果预期可能不同
  ** 用于编辑邮件的文字处理程序和用于编写数万页技术文档的文字处理程序的要求是不同的
* 因此测试前要明确一组具有代表性的测试任务

h4. 易学性度量

# 找一些从未使用过系统的用户，1）能够代表系统的目标用户，2）区分新手和有一般计算机经验的人
# 统计他们学习使用系统直至达到某种熟练程度的时间

特定熟练程度
* 用户能够完成某个特定的任务
* 或用户能够在特定的时间内完成一组特定任务
* 原因：学习曲线没有明确区分“学会和未学会”

h4. 使用效率度量

并不是所有用户都能够迅速达到最终的绩效水平 
* 用户自身的原因
* 少量系统的操作十分复杂

同样要区分不同的用户群体
* 对于有经验的用户
  ** “有经验”较为正规的衡量方式是通过使用系统的小时数来定义的
  ** 先使用，然后度量其绩效水平
  ** 或为用户绘制学习曲线
  ** 当发现用户的绩效水平在一段时间内不再提高时，就认为已经达到了该用户的稳定绩效水平

h4. 易记性度量

用户分类
* 新手用户，熟练用户，非频繁使用用户
* 对非频繁使用用户进行测试最能体现系统的易记性

度量方法
* 对在特定长时间内没有使用系统的用户进行标准用户·测试
  ** 记录下这些用户执行特定任务所用的时间
* 对用户进行记忆测试
  ** 如在用户完成一个应用系统的特定任务后，让用户解释各种命令的作用

h4. 错误率度量

通常指不能实现预定目标的操作

度量
* 在用户执行特定任务时通过统计这种操作的次数 
* 可以在度量其他可用性属性的同时来度量

错误分类
* 错误发生后能够被用户立刻纠正，不会对系统带来灾难性的影响，往往会被包含在使用效率的统计当中
* 不易于被用户发现，从而可能造成最终结果存在问题，设计人员在设计时也应该将其发生的频率降到最低

h4. 满意度度量

满意度度量评价都是主观的
* 以询问用户的方式进行度量更合适
* 为减少单个用户评价的主观性，把多个用户的结果综合起来取其平均值

度量通常在用户测试完成后进行
* 要求用户通过简单的调查问卷对系统打分
  ** 可以1-5或1-7的Likert度量尺度或语义差异尺度作为打分标准
  ** 一定要在用户使用系统执行真实的任务之后再来询问他们的看法

h3. 四种主要技术

完整的可用性工程过程
* 了解用户
* 竞争性分析
* 设定可用性目标
* 用户参与的设计
* 迭代设计
* 产品发布后的工作

简化
* 用户和任务观察
  ** 了解产品的目标用户是可用性工程的第一个步骤
  ** 要直接与潜在用户进行接触，不要满足于间接的接触和道听途说
* 场景(scenario)
  ** 简便易行的原型工具
  ** 通过省略整个系统的若干部分来减少实现的复杂性
  ** 水平原型：减少功能的深度并获得界面的表层
  ** 垂直原型：减少功能的数量而对所选功能进行完整实现
  ** 可以是纸质模型：也可以是简单的RAD原型
* 简化的边做边说(thinking aloud)
  ** 让真实用户在使用系统执行一组特定任务的时候，讲出他们的
所思所想
  ** 最有价值的单个可用性工程方法
  ** 可了解用户为什么这样做，并确定其可能对系统产生的误解
  ** 实验人员需要不断地提示用户，或请他们事先观摩
* 启发式评估(专家？)
  ** 研究表明，能够发现许多可用性问题
  ** 剩下的可以通过简化的边做边说方法来发现
  ** 为避免个人的偏见，应当让多个不同的人来进行经验性评估

h3.设计规则

h4. 基本规则
* 可学习型，新用户能用它开始有效的交互并能获得最大的性能
* 灵活性，用户和系统能以多种方式交换信息
* 健壮性，在决定成就和目标评估方面对用户提供的支持程度

h4. 黄金规则

# 尽可能保证一致，是界面熟悉，可预测（动作序列，菜单中的属于，字体，颜色，布局）
# 符合普遍可用性（熟练程度，年龄范围）
# 提供信息丰富的反馈，界面对象的可视化表现
# 设计说明对话框以生成结束信息
# 预防并处理错误
  ** 将不适当的菜单选项功能以灰色显示屏蔽
  ** 禁止在数值输入域中出现字母字符
  ** 提供简单的、有建设性的、具体的指导来帮助用户恢复操作
# 让操作容易撤销
# 支持内部控制点
  ** 避免模态对话框
  ** 避免很长的引导序列
  ** 提供出口:取消、重做、放弃等
# 减轻短时记忆负担
界面显示尽可能简单
  ** 不同显示页面的风格应该统一
  ** 尽可能减少在窗口之间的移动
  ** 并且要确保提供用户足够的学习代码、记忆操作方法 和操作序列的时间
  ** 提供适当的在线帮助信息

h4. 启发式规则

# 系统状态的可见度
# 系统和现实世界的吻合
# 用户享有控制权和自主权
# 一致性和标准化
# 避免出错
# 依赖识别而非记忆
# 使用的灵活性和高效性
# 审美感和最小化设计
# 帮助用户识别、诊断和恢复错误
# 帮助和文档

h2. 交互式系统设计过程

h3. 设计过程的基本活动

* 标识用户需要并建立需求
  ** 必须了解谁是目标用户
  ** 交互式产品应提供哪些支持
  ** 最基本的
* 开发满足需求的候选设计方案
  ** 设计的核心活动
  ** 概念设计和物理设计
* 构建设计的交互式版本
  ** 评价设计的最佳方法就是让用户与产品交互
  ** 不一定是可运行的软件版本
* 评估设计
  ** 评估它的可用性和可接受性
  ** 制定各种评估标准

h3. 关键特征

* 以用户为中心
  ** 人机交互领域的一个核心观点
* 稳定的可用性标准
  ** 有助于设计人员选择不同的候选方案
  ** 并在产品开发过程中随时检查
* 迭代
  ** 设计人员不可能一次就找出正确的解决方案
  ** 利用反馈来改进设计

h3. 瀑布模型

贡献：
* 把分析和编码作为了模型的两个主要组成部分
* 第一个得到广泛承认的模型

缺点：
* 以文档为中心，用户难以理解
* 不适用于交互式软件产品的开发
* 假设需求是不变的

h3. 螺旋模型

* 以降低风险为中心
* 引入了迭代的思想

缺点：
* 过于复杂，客户难以掌握
* 风险评估需大量信息
* 未发现的风险是棘手的

h3. 原形法

优点
* 易于用户提供反馈
* 减少了开发时间和成本
* 用户参与到开发过程中

h3. 星型生命周期模型 - HCI

* 分析模式：自定向下、组织化、判定和正式化，它是从系统到用户的方法
* 合成模式：自底向上、自由思考、创造性，这是由用户至系统的方法
* 特点：
  ** 没有指定任何活动次序
  ** “评估”是这个模型的核心
  ** 源于开发人员的实际经验

<div class="row"><div class="span6 thumbnail">!http://sheimi.me/images/blog/notes/HCI-star.png!</div></div>

h3. 可用性工程生命周期 – HCI领域

* 体现了可用性工程的总体概念
* 详细描述了如何执行可用性任务
* 说明了如何把可用性任务集成到传统的软件开发生命周期中

h3. 设计过程的管理

* 以用户为中心的设计
  ** 在开发过程中产生尽可能少的错误
  ** 开发费用少和维护成本低
  ** 易于学习、执行速度更快
  ** 鼓励用户探索
  ** 应尽早使用

h3. 合理的以用户为中心的交互设计，LUCID

* 预想：发展清晰、共享的产品场景，使概念草案具体化 * 发现：研究用户以决定高端的用户需求、术语和智力模型
设计基础：发展概念设计，创造关键屏幕画面原型
设计细节：将高端设计加以充实，形成完备的详细说明书 
构建：通过回顾和后期改变管理方式来支持生产过程 
发布：
通过有力的推广来支持用户向新产品的过渡；进入最后的可用性测试