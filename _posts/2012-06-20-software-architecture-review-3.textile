---
layout: post
title: 软件架构复习笔记(3)
category: blog
published: false 
meta:
  location: NJU 
tags: [architecture, review，note]
---

h2. 4. 软件体系结构的风格

要求：
* 描述或比较相关的风格
* 对给定场景判断需要使用的风格

h3. 主程序/子程序风格 (Main Program/Subroutine Style)

约束：
* 基于声名-使用（程序调用）关系建立连接件，层次分解的方式建立系统部件
* ?上层部件可以使用下层部件，但下层部件不能使用上层部件，即不允许你方向调用
* 系统应该是单线程执行。主程序部件拥有最初的执行控制权，并在“使用”中将控制权转移给下层子程序
* 子程序只能够通过上层转移来获取控制权，可以在执行中将控制权转角给下层子程序，并在自身执行完成之后将控制权交还给上层部件

h3. 面向对象风格 (Object-Oriented Style)

h3. 分层风格 (Layered Style)

h3. 隐式调用风格 (Implicit Invocation Style)

h3. 管道过滤器风格 (Pipe-Filter Style)

h3. 存储库风格 (Repository Style)

h3. MVC 风格

h3. 客户端/服务器风格(Client/Server Style)


h2. 5. 职责分配与设计协作

要求:
* 协作设计（控制风格）的比较和场景判定
* 对给定场景和要求的控制风格，根据GRASP模式判定职责的分配
* 根据分析类图和体系结构模块接口，建立基本设计类图


h2. 6. 设计模式

h3. 重点，设计模式部分所有的思考题（2题）

h3. 普通 Programming to Interface 有哪些手段？集合类型 PTI 有那些手段

h3. OCP 有那些手段（提示：不只是继承）

h3. 一个模块的信息隐藏有哪两种基本类型，各自有哪些处理手段？

两种决策类型：
* 需求：即一个模块的接口功能与模块内部程序细节的分离
  ** 给出功能接口，隐藏功能实现程序的细节
* 变化：将要发生变化的程序部分需要进行一个决策
  ** 给出需要修改部分的接口，隐藏待修改部分的实现程序细节

h3. 实现共性与可变性有哪些手段？ 对给定的场景，给出共性与可变性的设计方案，将继承和聚合搞好

h3. 在解决De-Coupling时，常常使用哪些Indirection的手段？对给定场景给出Indirection的解决方案

从常见模式来考虑

h3. MVC与分层方式的区别（要具体到实现）

h3. 对象的创建有哪些常见的解决方法（hint：这里要求常见解决方法，不是设计模式）

创建谁来创建
高内聚
低耦合
创建者（聚合，包含）
